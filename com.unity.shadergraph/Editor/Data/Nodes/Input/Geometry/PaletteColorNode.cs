using System;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEditor.Graphing;
using UnityEditor.ShaderGraph.Drawing.Controls;
using UnityEditor.ShaderGraph.Internal;

namespace UnityEditor.ShaderGraph
{
    [Title("Input", "Geometry", "Palette Color")]
    class PaletteColorNode : AbstractMaterialNode, IGeneratesBodyCode, IGeneratesFunction, IMayRequireColorPipelineIndex
    {
        public enum ColorSpace
        {
            Linear,
            Gamma
        }

        private const int kOutputSlotId = 0;
        public const string kOutputSlotName = "Out";

        [SerializeField]
        private ColorSpace m_Space = ColorSpace.Gamma;

        public PaletteColorNode()
        {
            name = "Palette Color";
            m_PreviewMode = PreviewMode.Preview3D;
            UpdateNodeAfterDeserialization();
        }

        [PopupControl("Colorspace")]
        public PopupList spacePopup 
        {
            get 
            {
                var names = Enum.GetNames(typeof(ColorSpace));
                return new PopupList(names, (int)m_Space);
            }
            set
            {
                if (m_Space == (ColorSpace)value.selectedEntry)
                    return;

                m_Space = (ColorSpace)value.selectedEntry;
                Dirty(ModificationScope.Graph);
            }
        }

        public sealed override void UpdateNodeAfterDeserialization()
        {
            AddSlot(new Vector3MaterialSlot(
                    kOutputSlotId,
                    kOutputSlotName,
                    kOutputSlotName,
                    SlotType.Output,
                    Vector3.zero));
            RemoveSlotsNameNotMatching(new[] { kOutputSlotId });
        }

        public void GenerateNodeCode(ShaderStringBuilder sb, GenerationMode generationMode)
        {
            sb.AppendLine("#if defined(_COLOR_PALETTE_STRUCTURED_BUFFER)");
            sb.AppendLine($"$precision3 {GetVariableNameForNode()} = _GlobalColorPalette[IN.{ShaderGeneratorNames.ColorPipelineIndex}].rgb;");
            sb.AppendLine("#else");
            sb.AppendLine($"$precision3 {GetVariableNameForNode()} = _ColorPaletteArray[IN.{ShaderGeneratorNames.ColorPipelineIndex}].rgb;");
            sb.AppendLine("#endif");

            if(m_Space == ColorSpace.Linear)
            {
                sb.AppendLine($"{GetVariableNameForNode()} = SRGBToLinear({GetVariableNameForNode()});");
            }
        }

        public void GenerateNodeFunction(FunctionRegistry registry, GenerationMode generationMode)
        {
            registry.ProvideFunction("ColorPipeline.Buffers", builder =>
            {
                builder.AppendLine("// Color Pipeline Buffers (Generated by Function Registry)");
                builder.AppendLine("#pragma multi_compile _ _COLOR_PALETTE_STRUCTURED_BUFFER");
                builder.AppendLine("#pragma multi_compile _ _SINGLE_COLOR_FROM_PALETTE");
                builder.AppendLine("");
                builder.AppendLine("#if defined(_COLOR_PALETTE_STRUCTURED_BUFFER)");
                builder.AppendLine("StructuredBuffer<float4> _GlobalColorPalette;");
                builder.AppendLine("#endif");
            });
        }

        public override string GetVariableNameForSlot(int slotId)
        {
            return GetVariableNameForNode();
        }

        public override void CollectShaderProperties(PropertyCollector properties, GenerationMode generationMode)
        {
            properties.AddShaderProperty(new Vector4ShaderProperty { overrideReferenceName = "_ColorPaletteArray[256]", generatePropertyBlock = false });
            properties.AddShaderProperty(new Vector1ShaderProperty { overrideReferenceName = "_ColorPaletteOffset", generatePropertyBlock = false });
            base.CollectShaderProperties(properties, generationMode);
        }

        public bool RequiresColorPipelineIndex()
        {
            return true;
        }
    }
}
