using System;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEditor.Graphing;
using UnityEditor.ShaderGraph.Drawing.Controls;
using UnityEditor.ShaderGraph.Internal;

namespace UnityEditor.ShaderGraph
{
    [Title("Input", "Geometry", "Palette Color")]
    class PaletteColorNode : AbstractMaterialNode, IGeneratesFunction, IMayRequireColorPipelineIndex
    {
        public enum ColorSpace
        {
            Linear,
            Gamma
        }

        private const int kOutputSlotId = 0;
        public const string kOutputSlotName = "Out";

        [SerializeField]
        private ColorSpace m_Space = ColorSpace.Gamma;

        public PaletteColorNode()
        {
            name = "Palette Color";
            m_PreviewMode = PreviewMode.Preview3D;
            UpdateNodeAfterDeserialization();
        }

        [PopupControl("Colorspace")]
        public PopupList spacePopup 
        {
            get 
            {
                var names = Enum.GetNames(typeof(ColorSpace));
                return new PopupList(names, (int)m_Space);
            }
            set
            {
                if (m_Space == (ColorSpace)value.selectedEntry)
                    return;

                m_Space = (ColorSpace)value.selectedEntry;
                Dirty(ModificationScope.Graph);
            }
        }

        public sealed override void UpdateNodeAfterDeserialization()
        {
            AddSlot(new Vector3MaterialSlot(
                    kOutputSlotId,
                    kOutputSlotName,
                    kOutputSlotName,
                    SlotType.Output,
                    Vector3.zero));
            RemoveSlotsNameNotMatching(new[] { kOutputSlotId });
        }

        public override string GetVariableNameForSlot(int slotId)
        {
            switch(m_Space)
            {
                case ColorSpace.Linear:
                    return $"SRGBToLinear(_GlobalColorPalette[IN.{ShaderGeneratorNames.ColorPipelineIndex}].rgb)";
                default:
                    return $"_GlobalColorPalette[IN.{ShaderGeneratorNames.ColorPipelineIndex}].rgb";
            }
        }

        public void GenerateNodeFunction(FunctionRegistry registry, GenerationMode generationMode)
        {
            registry.ProvideFunction("ColorPipeline.Buffers", builder =>
            {
                builder.AppendLine($"// Color Pipeline Buffers (Generated by Function Registry)");
                builder.AppendLine("StructuredBuffer<float4> _GlobalColorPalette;");
            });
        }

        public override void CollectShaderProperties(PropertyCollector properties, GenerationMode generationMode)
        {
            properties.AddShaderProperty(new Vector1ShaderProperty { overrideReferenceName = "_ColorPaletteOffset", generatePropertyBlock = false });
            base.CollectShaderProperties(properties, generationMode);
        }

        public bool RequiresColorPipelineIndex()
        {
            return true;
        }
    }
}
